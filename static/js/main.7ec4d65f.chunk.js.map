{"version":3,"sources":["PlanetView.js","PlanetGrid.js","WinDialog.js","FailureDialog.js","EntryPage.js","App.js","reportWebVitals.js","index.js"],"names":["PlanetView","_ref","planet","onPlanetClick","isSelected","imageSrc","concat","process","asteroid","wormhole","supernova","type","React","createElement","className","onClick","src","alt","PlanetGrid","planets","onPlanetSwap","gridSize","selectedPlanet","setSelectedPlanet","useState","useEffect","document","documentElement","style","setProperty","handlePlanetClick","isAdjacent","planet1","planet2","diff","Math","abs","id","floor","map","key","WinDialog","onDismiss","stepsTaken","role","aria-label","FailureDialog","EntryPage","onStartGame","setGridSize","winCount","setWinCount","difficulty","setDifficulty","errorMessage","setErrorMessage","value","onChange","e","parseInt","target","min","max","handleStartClick","generatePlanets","typeMultiplier","types","slice","i","push","random","length","hasWinningLine","checkLine","line","every","j","horizontal","vertical","diagonal1","diagonal2","k","calculateMinSteps","isWinCondition","swapPlanets","idx1","idx2","newPlanets","bfs","queue","visited","Set","steps","add","JSON","stringify","currentPlanets","shift","forEach","ni","nj","newPlanetsStr","has","Infinity","App","isGameStarted","setIsGameStarted","setTypeMultiplier","maxStepsMultiplier","setMaxStepsMultiplier","setPlanets","gameState","setGameState","setStepsTaken","minSteps","setMinSteps","initialPlanets","minStepsCalculated","maxStepsAllowed","resetGame","Fragment","index1","indexOf","index2","checkWinCondition","handleStartGame","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.7ec4d65f.chunk.js","sourcesContent":["import React from 'react';\nimport './PlanetView.css';\n\nfunction PlanetView({ planet, onPlanetClick, isSelected }) {\n  const imageSrc = {\n    planet: `${process.env.PUBLIC_URL}/planet.png`,\n    asteroid: `${process.env.PUBLIC_URL}/asteroid.png`,\n    wormhole: `${process.env.PUBLIC_URL}/wormhole.png`,\n    supernova: `${process.env.PUBLIC_URL}/supernova.png`,\n  }[planet.type];\n\n  return (\n    <div className={`planet ${isSelected ? 'selected' : ''}`} onClick={() => onPlanetClick(planet)}>\n      <img src={imageSrc} alt={planet.type} />\n    </div>\n  );\n}\n\nexport default PlanetView;\n","import React, { useState, useEffect } from 'react';\nimport PlanetView from './PlanetView';\nimport './PlanetGrid.css';\n\nfunction PlanetGrid({ planets, onPlanetSwap, gridSize }) {\n  const [selectedPlanet, setSelectedPlanet] = useState(null);\n\n  useEffect(() => {\n    document.documentElement.style.setProperty('--grid-size', gridSize);\n  }, [gridSize]);\n\n  const handlePlanetClick = (planet) => {\n    if (!selectedPlanet) {\n      setSelectedPlanet(planet);\n    } else {\n      if (isAdjacent(selectedPlanet, planet, gridSize)) {\n        onPlanetSwap(selectedPlanet, planet);\n      }\n      setSelectedPlanet(null);\n    }\n  };\n\n  const isAdjacent = (planet1, planet2, gridSize) => {\n    const diff = Math.abs(planet1.id - planet2.id);\n    return (\n      (diff === 1 && Math.floor(planet1.id / gridSize) === Math.floor(planet2.id / gridSize)) ||\n      diff === gridSize\n    );\n  };\n\n  return (\n    <div className=\"grid\">\n      {planets.map((planet) => (\n        <div key={planet.id} className=\"grid-item\">\n          <PlanetView\n            planet={planet}\n            onPlanetClick={handlePlanetClick}\n            isSelected={selectedPlanet && selectedPlanet.id === planet.id}\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default PlanetGrid;\n","import React from 'react';\nimport './WinDialog.css';\n\nfunction WinDialog({ onDismiss, stepsTaken }) {\n  return (\n    <div className=\"dialog-overlay\">\n      <div className=\"dialog\">\n        <h1>\n          <span role=\"img\" aria-label=\"party popper\">🎉</span> You Won! <span role=\"img\" aria-label=\"party popper\">🎉</span>\n        </h1>\n        <p>Great job! You completed the game in {stepsTaken} steps.</p>\n        <button onClick={onDismiss}>Play Again</button>\n      </div>\n    </div>\n  );\n}\n\nexport default WinDialog;\n","import React from 'react';\nimport './FailureDialog.css';\n\nfunction FailureDialog({ onDismiss, stepsTaken }) {\n  return (\n    <div className=\"dialog-overlay\">\n      <div className=\"dialog\">\n        <h1>\n          <span role=\"img\" aria-label=\"crying face\">😢</span> Game Over! <span role=\"img\" aria-label=\"crying face\">😢</span>\n        </h1>\n        <p>Oh no! You took {stepsTaken} steps. Try again!</p>\n        <button onClick={onDismiss}>Try Again</button>\n      </div>\n    </div>\n  );\n}\n\nexport default FailureDialog;\n","import React, { useState } from 'react';\nimport './EntryPage.css';\n\nfunction EntryPage({ onStartGame }) {\n  const [gridSize, setGridSize] = useState(4);\n  const [winCount, setWinCount] = useState(4);\n  const [difficulty, setDifficulty] = useState('easy');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleStartClick = () => {\n    if (winCount > gridSize) {\n      setErrorMessage('Win count cannot be greater than grid size.');\n      return;\n    }\n\n    const typeMultiplier = difficulty === 'easy' ? 2 : difficulty === 'medium' ? 3 : 4;\n    const maxStepsMultiplier = difficulty === 'easy' ? 3 : difficulty === 'medium' ? 2 : 1;\n    onStartGame(gridSize, winCount, typeMultiplier, maxStepsMultiplier);\n  };\n\n  return (\n    <div className=\"entry-page\">\n      <h1>Welcome to Orbital Shuffle!</h1>\n      <p>Rules: The objective is to align {winCount} adjacent matching planets to win the game. Choose your grid size and difficulty mode.</p>\n      \n      <label>\n        Grid Size:\n        <input type=\"number\" value={gridSize} onChange={(e) => setGridSize(parseInt(e.target.value, 10))} min=\"3\" max=\"10\" />\n      </label>\n      \n      <label>\n        Win Count:\n        <input type=\"number\" value={winCount} onChange={(e) => setWinCount(parseInt(e.target.value, 10))} min=\"3\" max={gridSize} />\n      </label>\n\n      <label>\n        Difficulty:\n        <select value={difficulty} onChange={(e) => setDifficulty(e.target.value)}>\n          <option value=\"easy\">Easy</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </select>\n      </label>\n      \n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n      \n      <button onClick={handleStartClick}>Start Game</button>\n    </div>\n  );\n}\n\nexport default EntryPage;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport PlanetGrid from './PlanetGrid';\nimport WinDialog from './WinDialog';\nimport FailureDialog from './FailureDialog';\nimport EntryPage from './EntryPage';\n\nconst generatePlanets = (gridSize, typeMultiplier) => {\n  const types = ['planet', 'asteroid', 'wormhole', 'supernova'].slice(0, gridSize * typeMultiplier);\n  \n  let planets;\n  do {\n    planets = [];\n    for (let i = 0; i < gridSize * gridSize; i++) {\n      planets.push({\n        id: i,\n        type: types[Math.floor(Math.random() * types.length)],\n      });\n    }\n  } while (hasWinningLine(planets, gridSize, 3));\n  \n  return planets;\n};\n\nconst hasWinningLine = (planets, gridSize, winCount) => {\n  const checkLine = (line) => {\n    return line.length >= winCount && line.every((planet) => planet.type === line[0].type);\n  };\n\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      const horizontal = [];\n      const vertical = [];\n      const diagonal1 = [];\n      const diagonal2 = [];\n\n      for (let k = 0; k < winCount; k++) {\n        if (i + k < gridSize) vertical.push(planets[(i + k) * gridSize + j]);\n        if (j + k < gridSize) horizontal.push(planets[i * gridSize + j + k]);\n        if (i + k < gridSize && j + k < gridSize)\n          diagonal1.push(planets[(i + k) * gridSize + j + k]);\n        if (i + k < gridSize && j - k >= 0)\n          diagonal2.push(planets[(i + k) * gridSize + j - k]);\n      }\n\n      if (\n        checkLine(horizontal) ||\n        checkLine(vertical) ||\n        checkLine(diagonal1) ||\n        checkLine(diagonal2)\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst checkWinCondition = (planets, winCount, gridSize) => {\n  const checkLine = (line) => {\n    return line.length >= winCount && line.every((planet) => planet.type === line[0].type);\n  };\n\n  for (let i = 0; i < gridSize; i++) {\n    for (let j = 0; j < gridSize; j++) {\n      const horizontal = [];\n      const vertical = [];\n      const diagonal1 = [];\n      const diagonal2 = [];\n\n      for (let k = 0; k < winCount; k++) {\n        if (i + k < gridSize) vertical.push(planets[(i + k) * gridSize + j]);\n        if (j + k < gridSize) horizontal.push(planets[i * gridSize + j + k]);\n        if (i + k < gridSize && j + k < gridSize)\n          diagonal1.push(planets[(i + k) * gridSize + j + k]);\n        if (i + k < gridSize && j - k >= 0)\n          diagonal2.push(planets[(i + k) * gridSize + j - k]);\n      }\n\n      if (\n        checkLine(horizontal) ||\n        checkLine(vertical) ||\n        checkLine(diagonal1) ||\n        checkLine(diagonal2)\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst calculateMinSteps = (planets, winCount, gridSize) => {\n  const isWinCondition = (planets) => {\n    const checkLine = (line) => {\n      return line.length >= winCount && line.every((planet) => planet.type === line[0].type);\n    };\n\n    for (let i = 0; i < gridSize; i++) {\n      for (let j = 0; j < gridSize; j++) {\n        const horizontal = [];\n        const vertical = [];\n        const diagonal1 = [];\n        const diagonal2 = [];\n\n        for (let k = 0; k < winCount; k++) {\n          if (i + k < gridSize) vertical.push(planets[(i + k) * gridSize + j]);\n          if (j + k < gridSize) horizontal.push(planets[i * gridSize + j + k]);\n          if (i + k < gridSize && j + k < gridSize)\n            diagonal1.push(planets[(i + k) * gridSize + j + k]);\n          if (i + k < gridSize && j - k >= 0)\n            diagonal2.push(planets[(i + k) * gridSize + j - k]);\n        }\n\n        if (\n          checkLine(horizontal) ||\n          checkLine(vertical) ||\n          checkLine(diagonal1) ||\n          checkLine(diagonal2)\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  const swapPlanets = (planets, idx1, idx2) => {\n    const newPlanets = [...planets];\n    [newPlanets[idx1], newPlanets[idx2]] = [newPlanets[idx2], newPlanets[idx1]];\n    return newPlanets;\n  };\n\n  const bfs = () => {\n    const queue = [];\n    const visited = new Set();\n    queue.push({ planets, steps: 0 });\n    visited.add(JSON.stringify(planets));\n\n    while (queue.length > 0) {\n      const { planets: currentPlanets, steps } = queue.shift();\n\n      if (isWinCondition(currentPlanets)) {\n        return steps;\n      }\n\n      for (let i = 0; i < gridSize; i++) {\n        for (let j = 0; j < gridSize; j++) {\n          const idx1 = i * gridSize + j;\n          const neighbors = [\n            [i + 1, j],\n            [i - 1, j],\n            [i, j + 1],\n            [i, j - 1],\n          ];\n\n          neighbors.forEach(([ni, nj]) => {\n            if (ni >= 0 && ni < gridSize && nj >= 0 && nj < gridSize) {\n              const idx2 = ni * gridSize + nj;\n              const newPlanets = swapPlanets(currentPlanets, idx1, idx2);\n              const newPlanetsStr = JSON.stringify(newPlanets);\n\n              if (!visited.has(newPlanetsStr)) {\n                visited.add(newPlanetsStr);\n                queue.push({ planets: newPlanets, steps: steps + 1 });\n              }\n            }\n          });\n        }\n      }\n    }\n\n    return Infinity; // If no solution is found\n  };\n\n  return bfs();\n};\n\nfunction App() {\n  const [isGameStarted, setIsGameStarted] = useState(false);\n  const [gridSize, setGridSize] = useState(4);\n  const [winCount, setWinCount] = useState(4);\n  const [typeMultiplier, setTypeMultiplier] = useState(2);\n  const [maxStepsMultiplier, setMaxStepsMultiplier] = useState(2);\n  const [planets, setPlanets] = useState([]);\n  const [gameState, setGameState] = useState('ONGOING');\n  const [stepsTaken, setStepsTaken] = useState(0);\n  const [minSteps, setMinSteps] = useState(0);\n\n  useEffect(() => {\n    if (isGameStarted) {\n      const initialPlanets = generatePlanets(gridSize, typeMultiplier);\n      setPlanets(initialPlanets);\n      const minStepsCalculated = calculateMinSteps(initialPlanets, winCount, gridSize);\n      setMinSteps(minStepsCalculated);\n    }\n  }, [isGameStarted, gridSize, winCount, typeMultiplier]);\n\n  const handleStartGame = (gridSize, winCount, typeMultiplier, maxStepsMultiplier) => {\n    if (winCount > gridSize) {\n      alert('Win count cannot be greater than grid size.');\n      return;\n    }\n    setGridSize(gridSize);\n    setWinCount(winCount);\n    setTypeMultiplier(typeMultiplier);\n    setMaxStepsMultiplier(maxStepsMultiplier);\n    setIsGameStarted(true);\n  };\n\n  const maxStepsAllowed = minSteps * maxStepsMultiplier;\n\n  const swapPlanets = (planet1, planet2) => {\n    const newPlanets = [...planets];\n    const index1 = newPlanets.indexOf(planet1);\n    const index2 = newPlanets.indexOf(planet2);\n    [newPlanets[index1], newPlanets[index2]] = [newPlanets[index2], newPlanets[index1]];\n    setPlanets(newPlanets);\n    setStepsTaken(stepsTaken + 1);\n\n    if (checkWinCondition(newPlanets, winCount, gridSize)) {\n      setGameState('WON');\n    } else if (stepsTaken + 1 > maxStepsAllowed) {\n      setGameState('FAILED');\n    }\n  };\n\n  const resetGame = () => {\n    const initialPlanets = generatePlanets(gridSize, typeMultiplier);\n    setPlanets(initialPlanets);\n    setStepsTaken(0);\n    setGameState('ONGOING');\n    const minStepsCalculated = calculateMinSteps(initialPlanets, winCount, gridSize);\n    setMinSteps(minStepsCalculated);\n  };\n\n  return (\n    <div className=\"App\">\n      {!isGameStarted ? (\n        <EntryPage onStartGame={handleStartGame} />\n      ) : (\n        <>\n          {gameState === 'WON' && <WinDialog onDismiss={resetGame} stepsTaken={stepsTaken} />}\n          {gameState === 'FAILED' && <FailureDialog onDismiss={resetGame} stepsTaken={stepsTaken} />}\n          <PlanetGrid planets={planets} onPlanetSwap={swapPlanets} gridSize={gridSize} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}